/**
 * Here we'll convert data from the DB to a Json.Payload object
 */
import fs from 'fs';
import axios from 'axios';
import path from 'path';
import { MYSQL_DB } from '../../classes/MYSQL_DB';
import { coreTables } from '../../constants/coreTables';
import { AE } from '../../types/AE';
import { CORE } from '../../types/CORE';
import { DB } from '../../types/DB';
import { GENERALNEWS, SPORTNEWS } from '../SPORTNEWS';
import { buildAbsoluteSubfolderStructure__AE } from '../helper/buildAbsoluteSubfolderStructure';
import { getBrandEditionProduct } from '../helper/getBrandEditionProduct';
import identifyRenderMachine from '../identifyRenderMachine';
import { itemTextKeys, mappingFuncs } from '../MAPPING';
import { PATHS } from '../PATHS';
import { Paths } from '../../types/CORE/Paths';
import { getGeneralPaths } from '../R2R/components/getGeneralPaths';
import { getLang } from '../getLang';
import { getIntroDate } from '../getIntroDate';
import { getSubfolderStrucure } from '../R2R/components/getSubfolderStructure';
import { TMPTables } from '../../constants/templateTables';
import { Template } from '../../types/CORE/Template';

const tempMonths = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];

export async function SNS_AE_News__CORE() {    
    const SportsDB = new MYSQL_DB();
    SportsDB.createPool('SPORTS');

    const BackofficeDB = new MYSQL_DB();
    BackofficeDB.createPool('BACKOFFICE');

    try {
        /**
         * Firstly we define the two main variables
         * @param brand_name string,
         * @param lang of the type @type {CORE.Keys.Lang} 
         * @param product_name of the @type {CORE.Keys.Product}
         * 
         * When transitioning into the UI, these will be
         * the two main variables that will be set by the user
         * 
         * besides these, we'll try and make all the data flow
         * from the database.
         */
        const brand_name: string = 'CWINZ';
        const product_name: CORE.Keys.Product = 'SNS_AE_News';
        const langCode: string = 'AR';
        const lang: DB.Lang = await getLang(SportsDB, langCode);
        const renderMachine: DB.RenderMachine = await identifyRenderMachine(SportsDB);
        const sportName: DB.SportName = 'Football';
        const templateName: string = 'mixed-sports1';

        const PORT = 9411;
        const API_Endpoint = '/api/extboiler/';

        let texts: AE.Json.TextImport[] = [];
        let files: AE.Json.FileImport[] = [];
        let trimSyncData: AE.Json.TS.Sequence = [];

        const {introDate, targetDate} = getIntroDate(lang.date_format);

        // HARDCODED-MODIFY
        texts.push({
            text: introDate,
            textLayerName: 'introdate',
            recursiveInsertion: true,
        });

        const {brand, edition, product} = 
            await getBrandEditionProduct(SportsDB, brand_name, product_name, langCode, sportName);

        const generalFolderPaths: Paths.GeneralFolders =
            await getGeneralPaths(renderMachine, SportsDB);


        // console.log(`generalFolderPaths: ${JSON.stringify(generalFolderPaths, null, 2)}`);
        // return;
        /*
            generalFolderPaths: {
                "dynamic_backgrounds": "G:/My Drive/Sports/S_Studio/S_S_Backgrounds/S_S_Backgrounds_$item_specific_sport_name",
                "narration": "G:/My Drive/Sports/S_Studio/S_S_Narration/S_S_N_",
                "logos": "G:/My Drive/Sports/S_Studio/S_S_Logos/S_B_$item_specific_sport_name"
            }
        */

        /** 
         * let's start building the path hierarchy.
         * The dollar sign is used since that's the symbol
         * that appears on the variables in the database
         */
        // let $: { [key in Partial<CORE.Keys.AE.ExpectedPathVariables>]: string } = {
        //     drive_path: renderMachine.drive_path,
        //     qnap_path: renderMachine.qnap_path,
        //     sport: `${edition.sport}/`, // edition.sport === 'General' ? 'Mixed/' : `${edition.sport}/`,
        //     lang: edition.lang,
        //     brand_path: `${renderMachine[brand.root_folder]}${brand.brand_path}`,
        //     product_path: product.product_path,
            
        //     dynamic_backgrounds: generalFolderPaths.dynamic_backgrounds,
        //     narration: generalFolderPaths.narration,
        //     logos: generalFolderPaths.logos,
        // };
        // $.product_path = $.product_path.replace('$brand_path/', $.brand_path);
        
        // if (!fs.existsSync($.brand_path)) throw `Brand folder not found: ${$.brand_path}`;
        // if (!fs.existsSync($.product_path)) throw `Product folder not found: ${$.product_path}`;

        let productSubfolders: CORE.AE.ProductSubFolder[] = 
            await SportsDB.SELECT(coreTables.product_subfolders,
            {whereClause: {product_name: edition.product_name}}
        );

        const subFolders = getSubfolderStrucure(
            productSubfolders, renderMachine, edition, brand, product, generalFolderPaths
        );

        /** 
         * get the buleprint of the subfolder structure for the given product.
         */
        // let subfolderStructure: CORE.AE.ProductSubFolder[] = 
        //     await DB.SELECT(coreTables.product_subfolders,
        //     {whereClause: {product_name: edition.product_name}}
        // );

        /** 
         * build the subfolders as an object with the absolute paths
         * where the keys are of @type {CORE.Keys.PS.ProductSubFolder}
         */
        // const subFolders: {[key in CORE.Keys.AE.ProductSubFolder]: string} = 
        //     buildAbsoluteSubfolderStructure__AE(subfolderStructure, $);
        
        // console.log(`subFolders: ${JSON.stringify(subFolders, null, 2)}`);
        // return;
        /*
            subFolders: {
                "dynamic_backgrounds": "G:/My Drive/Sports/S_Studio/S_S_Backgrounds/S_S_Backgrounds_$item_specific_sport_name",
                "exports": "//NAS4Bay/Qnap3/Studio/Sports/S_Brands/Fortuna/AE/Daily News/exports/",
                "narration": "G:/My Drive/Sports/S_Studio/S_S_Narration/S_S_N_General/RO/",
                "presenters": "//NAS4Bay/Qnap3/Studio/Sports/S_Brands/Fortuna/presenters/RO/",
                "saves": "//NAS4Bay/Qnap3/Studio/Sports/S_Brands/Fortuna/AE/Daily News/saves/",
                "templates": "//NAS4Bay/Qnap3/Studio/Sports/S_Brands/Fortuna/AE/Daily News/templates/"
            }
        */

        const templateMainLayers = await BackofficeDB.SELECT(TMPTables.templateMainLayers, {whereClause: {template_name: templateName}});
        const templateClusters: Template.Record.Cluster[] = await BackofficeDB.SELECT(TMPTables.templateClusters, {whereClause: {template_name: templateName}});
        const templateElements: Template.Record.Element[] = await BackofficeDB.SELECT(TMPTables.templateElements, {whereClause: {template_name: templateName}});
        const objectElements: Template.Obj.Element[] = await BackofficeDB.SELECT(TMPTables.objectElements);
        const elementBluePrints: Template.Element.DB_Blueprint[] = await BackofficeDB.SELECT(TMPTables.elements);
        const objects: Template.Obj[] = await BackofficeDB.SELECT(TMPTables.objects);
        const elementActions: Template.Element.Action[] = await BackofficeDB.SELECT(TMPTables.elementActions);
        const clusterActions: Template.Cluster.Action[] = await BackofficeDB.SELECT(TMPTables.clusterActions);
    
        /**
         * We'll start with getting our raw data
         * then we will manipulate the data to fit the actions scheme
         * and then we'll export a sample json file.
         */
        const allNewsItems: {[key in DB.SportName]: DB.Item.JoinedNews[]} = 
        await SPORTNEWS.getTransItemsByLangAndSport(SportsDB, langCode);

        /** 
         * because we want a to select a random template 
         * and background and take the selected file out of the pool
         * we first create the initial
         */
        const templateFolderContent: string[] = fs.readdirSync(subFolders.templates);
        let templateFiles: string[] = templateFolderContent.filter(file => file.endsWith('.aep'));
        if (templateFiles.length === 0) throw `No templates found in folder: ${subFolders.templates}`;

        const backgroundPaths: {[key in DB.SportName]: string} = {
            Cricket: subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Cricket'),
            Football: subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Football'),
            Tennis: subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Tennis'),
            Motorsport: subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Motorsport'),
            Basketball: subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Basketball'),
            Baseball: '',
            Misc: '',
        }

        for (let sportName in backgroundPaths){
            if (sportName === 'Baseball') continue;
            if (!fs.existsSync(backgroundPaths[sportName as DB.SportName])) 
                throw `Background folder not found: ${backgroundPaths[sportName as DB.SportName]}`;
        }

        let backgrounds: {[key in DB.SportName]: string[]} = 
        {
            Cricket: fs.readdirSync(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Cricket')),
            Football: fs.readdirSync(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Football')),
            Tennis: fs.readdirSync(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Tennis')),
            Motorsport: fs.readdirSync(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Motorsport')),
            Basketball: fs.readdirSync(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name', 'Basketball')),
            Baseball: [],
            Misc: [],
        }
        
        for (let sportName in backgrounds){
            if (sportName === 'Baseball') continue;
            let backgroundFiles: string[] = backgrounds[sportName as DB.SportName].filter(
                file => file.endsWith('.mp4')
            );
            if (backgroundFiles.length === 0) throw `No backgrounds found in folder: ${backgroundPaths[sportName as DB.SportName]}`;
            backgrounds[sportName as DB.SportName] = backgroundFiles;
        }

        // now we know that we have at least 1 template and 1 background

        const itemKeys: string[] = ['headline', 'sub_headline', 'narration'];
        const item = newsItems[0];
        // for (let item of newsItems) {
            
            /**
             * Validate the data
             * 
             * There can be items with null values, so we'll skip those
             * while all other cases will throw an error
             */
            let goNogo = true;
            for (const key of itemKeys) {
                // console.log(key);
                if (!(key in item)) throw `Key not found in news item: ${key}`;
                if (item[key] === null){
                    goNogo = false;
                    console.warn(`Ran into null key @ ${key}. Skipping.`);
                    break;
                }
                if (item[key] === '' || !item[key] || item[key].length < 3){
                    goNogo = false;
                    console.warn(`Ran into empty key @ ${key}. Skipping.`);
                    break;
                }

            }
            if (!goNogo) return; // continue;

            // const formattedDate = getFormattedDate();
            
            // const templateFullPath = path.resolve(subFolders.templates, templatePath).replace(/\\/g, '/');
            // const backgroundFullPath = path.resolve(subFolders.staticBackgrounds, backgroundPath).replace(/\\/g, '/');

            // console.log(`templateFullPath: ${templateFullPath}`);
            // console.log(`backgroundFullPath: ${backgroundFullPath}`);

            // if (!fs.existsSync(backgroundFullPath)) throw `Background not found: ${backgroundPath}`;
            // if (!fs.existsSync(templateFullPath)) throw `Template not found: ${templatePath}`;

            // const exportName = `${brand_name}-${item[`headline__${$.lang}`]}-${templateName}-${formattedDate}.png`;
            // const saveName = `${brand_name}-${item.id}-${item[`headline__${$.lang}`]}-${templateName}-${formattedDate}.psd`;

        /**
         * Now for every item we get the texts and files
         * if there are standings we get the standings texts
         * currently the schedule texts are not implemented
         */
        const runThroughItems = async () => {
            const items: DB.Item.JoinedNews[] = await GENERALNEWS.getTransItemsByLang(DB, lang);

            if (items.length === 0) throw `No items found for lang ${lang} in table RAPID__TRANS_NEWS`;

            // console.log(`itemsLength: ${itemsLength}`);
            // const i=0;

            // for (const item of items) {
            for (let i=0; i<items.length; i++) {
                const item = items[i];
                // console.log(`item: ${i+1}: ${JSON.stringify(item)}`);
                // return;
                // firstly let's generate the texts and files (relative, cause we're creating a job)
                // starting with the texts of the news item (headline, sub_headline)

                const populateItemTexts = () => {
                    for (const itemTextKey of itemTextKeys) {
                        const textLayerName =
                            mappingFuncs[itemTextKey as DB.Jobs.Mapping.ItemFileKey](
                                item
                            );

                        const text: AE.Json.TextImport = {
                            text: item[itemTextKey as keyof DB.Item.News],
                            textLayerName,
                            recursiveInsertion: false,
                        };
                        texts.push(text);
                    }
                }

                populateItemTexts();
                // console.log(JSON.stringify(texts));
                // return;

                const populateItemFiles = () => {
                    // for (const itemFileKey of itemFileKeys) { // narration, background, logo
                    //     // narration needs to be converted to file_name
                    //     const correctedItemKey = itemFileKey === 'narration' ? 'file_name' : itemFileKey;
                    //     // const optionalLangAddition = itemFileKey === 'narration' ? `${lang}/` : '';
                    //     let folderKey = itemFileKey as string;
                    //     switch (itemFileKey) {
                    //         case 'background':
                    //             folderKey = 'dynamic_backgrounds';
                    //             break;
                    //         case 'logo':
                    //             folderKey = 'logos';
                    //             break;
                    //     }
                    //     let absoluteFilePath = `${absoluteFolderPaths[folderKey as keyof typeof absoluteFolderPaths]}`;
                    //     absoluteFilePath += (itemFileKey === 'background' || itemFileKey === 'logo') ? `S_B_${item.sport_name}/` : ``;
                    //     absoluteFilePath += item[correctedItemKey as keyof DB.Item.News];

                       
                    // }
                    
                    // throw `item: ${JSON.stringify(item)}`

                    const itemFiles: {[key: string ]: string} = {
                        narration: `${subFolders.narration}${item.file_name}`,
                        background: path.resolve(subFolders.dynamic_backgrounds.replace('$item_specific_sport_name',item.sport_name),item.background).replace(/\\/g, '/'),
                        logo: `${generalFolderPaths.logos.replace('$item_specific_sport_name',item.sport_name)}/${item.logo}`,
                    }

                    // throw `itemFiles: ${JSON.stringify(itemFiles, null, 2)}`

                    for (let key in itemFiles){
                        const absoluteFilePath = itemFiles[key];
                        // console.log(`absoluteFilePath for key: ${key} : ${absoluteFilePath}`);

                        if (!fs.existsSync(absoluteFilePath))
                            throw `absoluteFilePath path does not exist: ${absoluteFilePath}`;
                        files.push({
                            absolutePath: absoluteFilePath,
                            compositionName:
                                mappingFuncs[
                                    key as DB.Jobs.Mapping.ItemFileKey
                                ](item),
                            resizeAction: key === 'logo' ? 'fitToMedia' : null // 'fitToComp', // currently fitToComp is throwing an error
                        });
                    }
                }
                
                populateItemFiles();

                // const hasStandings = // false;
                //     !!item.show_standings && !!item.standings_league_season_id;
                // // console.log(`hasStandings: ${hasStandings}`);

                // if (hasStandings) {
                //     /**
                //      * If we have standings we throw loads of texts into the texts array
                //      * 
                //      * Here unfortunately we get the league_season_name
                //      * in every row and need to place it once in the converted
                //      * object
                //      */
                //     const populateStandingsTexts = async () => {
                //         let standings: DB.StandingAug[] =
                //             // await STANDINGS.getStandingsByLang(
                //             await STANDINGS.getStandingsEN(
                //                 DB,
                //                 item.sport_name!,
                //                 item.standings_league_season_id!,
                //                 // lang
                //             );

                //         standings = standings.slice(0, 10); // we only need the top 10

                //         // console.log(`%cStandings length: ${standings.length}`, `color: pink`);
                //         // console.log(`%csample: ${JSON.stringify(standings, null, 4)}`, `color: pink`);

                //         // Insert ranking header over the standings table
                //         // console.log(`LeagueSeason_name: ${standings[0].league_season_name}`)
                        
                //         const leagueSeasonName = standings[0].league_season_name || ''; // will be inserted as text
                //         const standingsHeaderLayerName = `Ranking-header-${i+1}`;
                //         texts.push({
                //             text: leagueSeasonName,
                //             textLayerName: standingsHeaderLayerName,
                //             recursiveInsertion: false,
                //         });

                //         // Standings title -- N, W, L
                //         // structure ranking-stat${col#}-header${item#}
                //         for (let j=0; j<standingTextKeys.length; j++) {
                //             const standingTextKey = standingTextKeys[j];
                //             if (standingTextKey === 'team_name') continue; // we don't need the team name (it's already in the item text
                //             const textLayerName = `ranking-stat${j}-header${i+1}`;
                //             const text: AE.Json.TextImport = {
                //                 text: standingTextKey.charAt(0).toUpperCase(),
                //                 textLayerName,
                //                 recursiveInsertion: false,
                //             };
                //             texts.push(text);
                //         }

                //         standings.forEach((standing, index) => {
                //             //console.log(JSON.stringify(standing));
                            
                //             if (index >= 10) return; // we only need the top 10

                //             for (const standingTextKey of standingTextKeys) {
                //                 //console.log(standingTextKey);
                                
                //                 let standingText =
                //                     standing[standingTextKey as keyof DB.StandingAug];
                //                 if (!standingText) standingText = ' ' // throw `No value for ${standingTextKey}`;

                //                 const textLayerName = mappingFuncs[
                //                     standingTextKey as DB.Jobs.Mapping.StandingTextKey
                //                 ](item, standing);

                //                 const text: AE.Json.TextImport = {
                //                     text: standingText, // might be a number
                //                     textLayerName,
                //                     recursiveInsertion: false,
                //                 };

                //                 // console.log(`%cText: ${JSON.stringify(text, null, 4)}`, 'color: pink');

                //                 texts.push(text);
                //             }
                //         });
                //     }

                //     await populateStandingsTexts();
                // }

                // //console.warn(`hasSchedule: ${item.show_next_matches} && ${item.schedule_league_season_id}`)
                // const hasSchedule = !!item.show_next_matches && !!item.schedule_league_season_id;
                // //console.log(`%chasSchedule: ${hasSchedule}`, 'color: Orange');

                // if (hasSchedule) {
                //     const populateScheduleTexts = async () => {
                //         let schedule: DB.NextMatch_WithTeamNames[] = await NEXTMATCHES.getBySportNameAndLeagueSeasonId(
                //             DB,
                //             item.sport_name!,
                //             item.schedule_league_season_id!
                //         );

                //         console.log(`%cSchedule length: ${schedule.length}`, `color: orange`);

                //         if (schedule.length > 10) schedule = schedule.slice(0, 10); // we only need the top 10
                //         // if (schedule.length < 10){ 
                //         //     console.warn(`There are less than 10 matches in the schedule for sport ${item.sport_name} item ${item.id} league_season_id ${item.schedule_league_season_id}`);
                //         //     return;
                //         // }

                //         for (let j=0; j<schedule.length; j++) {
                //             const match = schedule[j];
                //             const formatDateAndTime = () => {
                //                 // convert the mysql timestamp to a js date
                //                 const jsDate = new Date(match.start_time_timestamp);
                //                 let hours = jsDate.getHours();
                //                 const minutes = jsDate.getMinutes();
                //                 const formattedHours = hours > 12 ? hours -= 12 : hours;
                //                 const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
                //                 const AMPM = hours > 12 ? 'PM' : 'AM';

                //                 // console.log(`%cstart_time_timestamp: ${match.start_time_timestamp}`, 'color: Orange');
                                
                //                 // const splittedTimeStamp = String(match.start_time_timestamp).split('T');
                //                 // const splittedTimeStamp = jsDate.split(' ');
                //                 // const splittedDate = splittedTimeStamp[0].split('-');
                //                 // const splittedTime = splittedTimeStamp[1].split(':');
                //                 // temporarily we'll use the dd/mm/yyyy format for the date
                //                 // and hh:mm for the time
                //                 const formattedDate = `${jsDate.getDate()} ${tempMonths[jsDate.getMonth() + 1]}`;
                //                 const formattedTime = `${formattedHours}:${formattedMinutes} ${AMPM}`;
                //                 return [formattedDate, formattedTime];
                //             }

                //             const [formattedDate, formattedTime] = formatDateAndTime();
                            
                //             const dateLayerName = mappingFuncs.scheduleMatchDate(i+1, j+1);
                //             const timeLayerName = mappingFuncs.scheduleMatchTime(i+1, j+1);
                //             const homeTeamLayerName = mappingFuncs.scheduleHomeTeam(i+1, j+1);
                //             const awayTeamLayerName = mappingFuncs.scheduleAwayTeam(i+1, j+1);

                //             texts.push({
                //                 text: formattedDate,
                //                 textLayerName: dateLayerName,
                //                 recursiveInsertion: false,
                //             });
                //             texts.push({
                //                 text: formattedTime,
                //                 textLayerName: timeLayerName,
                //                 recursiveInsertion: false,
                //             });
                //             texts.push({
                //                 text: match.home_team_name,
                //                 textLayerName: homeTeamLayerName,
                //                 recursiveInsertion: false,
                //             });
                //             texts.push({
                //                 text: match.away_team_name,
                //                 textLayerName: awayTeamLayerName,
                //                 recursiveInsertion: false,
                //             });

                //             console.log(`%ctime: ${formattedDate} ${formattedTime}\nhome: ${match.home_team_name} away: ${match.away_team_name}`, 'color: Cyan');
                //         }
                        
                //     }

                //     await populateScheduleTexts();

                //     /**
                //      * Every team is supposed to have a logo
                //      * Currently there's no mechanism for this
                //      */
                //     const populateScheduleFiles = async () => {
                        
                //     }
                // }
            } // end items for loop
        }

        await runThroughItems();
        /**
         * The trimming can be done immediately after the presenter files have been inserted
         */
        // const trimPresenterFiles = () => {
        //     const compNames = ['Presenter Open','Presenter Close'];
        //     for (const compName of compNames) {
        //         const sync: AE.Json.TS.Trim = {
        //             method: 'trimByAudio',
        //             layerOrCompName: compName,
        //         };
        //         trimSyncData.push(sync);
        //     }
        // }

        // trimPresenterFiles();

        const trimNarration = () => {
            // firstly we trim the narration comps
            for (let i = 1; i <= 5; i++) {
                const narrationCompName = `News-Narration${i}`;
                const trim: AE.Json.TS.Trim = {
                    method: 'trimByAudio',
                    layerOrCompName: narrationCompName,
                };
                trimSyncData.push(trim);
            }
        }

        trimNarration();

        const trimSyncNews = () => {
            // now let's sync narration comps and trim the news comps
            for (let ii = 1; ii <= 2; ii++) {
                
                const syncNarrationComps = () => {
                    // first we sync the internal narration comps
                    // narration comps 1-3 are in News comp 1 and 4-5 are in News comp 2
                    
                    // we start with syncing the first narration comp
                    // to the beginning of the timeline (cause it's been trimmed)
                    const syncFirstNarrationLayerToStart = () => {
                        const narrationCompNumber = (ii - 1) * 3 + 1; // 1 or 4
                        const narrationCompName = `News-Narration${narrationCompNumber}`;
                        const sync: AE.Json.TS.Sync = {
                            method: 'syncHeadTail',
                            padding: 0.1,
                            layerAName: narrationCompName,
                            layerBName: `stickToStart${ii}`, // 1 or 2
                        };
                        trimSyncData.push(sync);
                    }
                    syncFirstNarrationLayerToStart();

                    const numberOfNarrationComps = 4 - ii;
                    for (let jj = 1; jj < numberOfNarrationComps; jj++) {
                        const narrationCompNumber = (ii - 1) * 3 + jj; // 1-2 for news 1 and 4 for news 2
                        // console.log(`narrationCompNumber: ${narrationCompNumber}`);
                        const nextNarrationCompNumber = narrationCompNumber + 1;
                        const narrationCompName = `News-Narration${narrationCompNumber}`;
                        const nextNarrationCompName = `News-Narration${nextNarrationCompNumber}`;
                        const sync: AE.Json.TS.Sync = {
                            method: 'syncHeadTail',
                            padding: 0.1,
                            layerAName: nextNarrationCompName,
                            layerBName: narrationCompName,
                        };
                        trimSyncData.push(sync);
                    }
                }
                syncNarrationComps();
                
                const syncBackgrounds = () => {
                    // Each background needs to get synced with the previous narration end
                    const numberOfBackgroundComps = 4 - ii;
                    for (let jj = 2; jj <= numberOfBackgroundComps; jj++) {
                        const backgroundCompNumber = (ii - 1) * 3 + jj; // 2-3 for news 1 and 5 for news 2
                        // console.log(`narrationCompNumber: ${narrationCompNumber}`);
                        const prevNarrationCompNumber = backgroundCompNumber - 1;
                        const backgroundCompName = `News-BG${backgroundCompNumber}`;
                        const prevNarrationCompName = `News-Narration${prevNarrationCompNumber}`;
                        const sync: AE.Json.TS.Sync = {
                            method: 'syncHeadTail',
                            padding: 0.1,
                            layerAName: backgroundCompName,
                            layerBName: prevNarrationCompName,
                        };
                        trimSyncData.push(sync);
                    }
                }
                syncBackgrounds();

                const newsCompName = `Todays news ${ii}`;
                const trim: AE.Json.TS.Trim = {
                    method: 'trimByAudio',
                    layerOrCompName: newsCompName,
                };
                trimSyncData.push(trim);

                /**
                 * Now we sync the markers of Todays news ${i}
                 * with the ends of the previous narration comps
                 */
                const relocateMarkers = () => {
                    const markerLayerName = `Todays news ${ii}`;
                    let soundMarkerLayerNames: string[] = [];
                    const numberOfNarrationComps = 4 - ii;
                    for (let kk = 1; kk < numberOfNarrationComps; kk++) {
                        const narrationCompNumber = (ii - 1) * 3 + kk; // 1-2 for news 1 and 4 for news 2
                        // console.log(`narrationCompNumber: ${narrationCompNumber}`);
                        const narrationCompName = `News-Narration${narrationCompNumber}`;
                        soundMarkerLayerNames.push(narrationCompName);
                    }
                    
                    const sync: AE.Json.TS.SyncMarker = {
                        method: 'markersSync',
                        padding: 0,
                        layerAName: markerLayerName,
                        layerBName: soundMarkerLayerNames,
                    };
                    trimSyncData.push(sync);
                }

                relocateMarkers();
            }
        }

        trimSyncNews();

        /**
         * We're done with inserting files and texts
         * and we're done with trimming narration and presenters
         * and syncing the news items internally (syncing the layers IN the news comps)
         * now it's time to sync the main comp layers
         * 
         * Syncing is done by pulling the next layer's start 
         * to the previous layer's end.
         * 
         * we'll start with Presenter Open to Intro
         * then News comp 1 to Presenter Open
         * then News comp 2 to News comp 1
         * then Presenter Close to News comp 2
         * 
         * Once all that's done we sync the soundtrack
         * and the markers
         */
        const syncMainCompLayers = () => {
            // Presenter Open to Intro
            // trimSyncData.push({
            //     method: 'syncHeadTail',
            //     padding: 0,
            //     layerAName: 'Presenter Open',
            //     layerBName: 'Intro',
            // });

            // News comp 1 to Presenter Open
            trimSyncData.push({
                method: 'syncHeadTail',
                padding: 0,
                layerAName: 'Todays news 1',
                layerBName: 'Intro',
            });

            // News comp 2 to News comp 1
            trimSyncData.push({
                method: 'syncHeadTail',
                padding: 0,
                layerAName: 'Todays news 2',
                layerBName: 'Todays news 1',
            });
            
            // // Presenter Close to News comp 2
            // trimSyncData.push({
            //     method: 'syncHeadTail',
            //     padding: 0,
            //     layerAName: 'Presenter Close',
            //     layerBName: 'News comp 2',
            // });

            // Ending to News comp 2 instead of Presenter Close via single marker
            trimSyncData.push({
                method: 'syncMarkerToOutPoint',
                padding: 0,
                layerAName: 'Ending',
                layerBName: 'Todays news 2',
            });

            const syncTransitions = () => {
                const transitionLayerNames = [
                    // 'trans-presOpen-news1',
                    // 'trans-news1-news2',
                    // 'trans-news2-presClose',
                    'trans1',
                    'trans2',
                ];

                const syncToLayers = [
                    // 'Presenter Open',
                    'Todays news 1',
                    'Todays news 2',
                ]

                for (let i=0; i<transitionLayerNames.length; i++){
                    const transLayerName = transitionLayerNames[i];
                    const syncToLayer = syncToLayers[i];
                    const syncMarker: AE.Json.TS.Sync = {
                        method: 'syncMarkerToOutPoint',
                        padding: 0,
                        layerAName: transLayerName,
                        layerBName: syncToLayer,
                    }
                    trimSyncData.push(syncMarker);
                }
            }

            syncTransitions();

            const syncSoundtrack = () => {
                const syncMarker: AE.Json.TS.Sync = {
                    method: 'syncMarkerToOutPoint',
                    padding: 0,
                    layerAName: 'Sound ending',
                    // layerBName: 'Presenter Close',
                    layerBName: 'Todays news 2',
                }
                trimSyncData.push(syncMarker);

                // now we trim the loop to the beginning of
                // the sound ending
                const trim: AE.Json.TS.Trim = {
                    method: 'trimOutToIn',
                    // layerOrCompName: 'Intro news III Loop',
                    layerOrCompName: 'Intro Sound',
                    trimToLayer: 'Sound ending',
                };
                trimSyncData.push(trim);
            }

            syncSoundtrack();
        }

        syncMainCompLayers();

        // set workarea
        const trim: AE.Json.TS.Trim = {
            method: 'trimWorkareaToLayerOut',
            layerOrCompName: '0_Main comp',
            trimToLayer: 'Ending',
        };
        trimSyncData.push(trim);

        let payload: AE.Json.Payload = {
            files,
            texts,
            trimSyncData,
            names: {
                exportComp: '0_Main comp',
                importBin: 'Imports',
            },
            paths: PATHS.getAll__CORE(subFolders, edition),
            dbg: {
                dbgLevel: -7,
                saveExportClose: {
                    isSave: false,
                    isExport: false,
                    isClose: false,
                },
            },
        };

        for (let text of payload.texts) {
            text.text = typeof text.text === 'string' ? text.text : String(text.text);
            // Use convertedText here
        }

        const jsoned = JSON.stringify(payload).replace(/\\\\/g, '/');
        // console.warn(jsoned);

        // return;

        const axiosResponse = await axios.post(
            `http://localhost:${PORT}${API_Endpoint}`,
            { stringifiedJSON: jsoned }
        );
        console.log(JSON.stringify(axiosResponse.data));
    } catch (error) {
        console.error(error);
    } finally {
        await DB.pool.end();
    }
}

Fortuna_SNS_AE_News__CORE();